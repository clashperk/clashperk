name: aws-ecr-publish-and-deploy

on:
  push:
    tags:
      - 'v*'
    paths-ignore:
      - scripts/**
  workflow_dispatch:

jobs:
  build:
    environment: Production
    name: aws-ecr-publish-and-deploy
    runs-on: buildjet-4vcpu-ubuntu-2204-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Submodules
        run: git submodule init && git submodule update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get ECR Registry
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.ecr-login.outputs.registry }}

      - name: Set up Docker Buildkit
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Get Tags for Image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.ecr-login.outputs.registry }}/clashperk-bot
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Docker Build, Tag and Push to ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          build-args: GIT_SHA=${{ github.sha }}

  deploy-main-bot:
    needs: build
    environment: Production
    name: deploy-main-bot
    runs-on: ubuntu-latest

    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd clashperk
            docker compose pull
            docker compose up -d

  deploy-custom-bot:
    needs: build
    environment: Production
    name: deploy-custom-bot
    runs-on: ubuntu-latest

    steps:
      - name: Deploy
        run: |
          curl --fail --location --request POST 'http://${{ secrets.CUSTOM_BOT_SERVICE }}/github-webhook' \
            --header 'x-api-key: ${{ secrets.CUSTOM_BOT_SERVICE_TOKEN }}'
